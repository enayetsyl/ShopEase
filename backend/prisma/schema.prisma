generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String
  role      UserRole
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  admin     Admin?
  customer  Customer?
  vendor    Vendor?

  @@map("users")
}

model Admin {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [email], references: [email])

  @@map("admins")
}

model Vendor {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  profilePhoto String?
  isDeleted    Boolean   @default(false)
  isSuspended  Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  follows      Follow[]
  orders       Order[]
  products     Product[]
  user         User      @relation(fields: [email], references: [email])

  @@map("vendors")
}

model Customer {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  profilePhoto String?
  isDeleted    Boolean  @default(false)
  isSuspended  Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cart         Cart[]
  user         User     @relation(fields: [email], references: [email])
  follows      Follow[]
  orders       Order[]
  reviews      Review[]

  @@map("customers")
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Float
  discount    Float       @default(0)
  categoryId  String
  inventory   Int
  image       String[]
  vendorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  cart        Cart[]
  flashSales  FlashSale[]
  category    Category    @relation(fields: [categoryId], references: [id])
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  reviews     Review[]
  orders      Order[]     @relation("OrderToProduct")

  @@map("products")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  products    Product[]

  @@map("categories")
}

model Order {
  id          String      @id @default(uuid())
  customerId  String
  vendorId    String
  quantity    Int
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
  customer    Customer    @relation(fields: [customerId], references: [id])
  vendor      Vendor      @relation(fields: [vendorId], references: [id])
  products    Product[]   @relation("OrderToProduct")

  @@map("orders")
}

model Cart {
  id         String   @id @default(uuid())
  customerId String
  productId  String
  quantity   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@map("carts")
}

model Review {
  id         String   @id @default(uuid())
  customerId String
  productId  String
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@map("reviews")
}

model Follow {
  id         String   @id @default(uuid())
  customerId String
  vendorId   String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  vendor     Vendor   @relation(fields: [vendorId], references: [id])

  @@map("follows")
}

model FlashSale {
  id        String   @id @default(uuid())
  productId String
  discount  Float
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])

  @@map("flash_sales")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  VENDOR
  CUSTOMER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
